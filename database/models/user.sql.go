// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package models

import (
	"context"
	"database/sql"
)

const addUser = `-- name: AddUser :exec
INSERT INTO users(user_id, user_name, email, user_pwd, avatar_url)
VALUES (?, ?, ?, ?, ?)
`

type AddUserParams struct {
	UserID    int64          `json:"user_id"`
	UserName  string         `json:"user_name"`
	Email     string         `json:"email"`
	UserPwd   string         `json:"user_pwd"`
	AvatarUrl sql.NullString `json:"avatar_url"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.ExecContext(ctx, addUser,
		arg.UserID,
		arg.UserName,
		arg.Email,
		arg.UserPwd,
		arg.AvatarUrl,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, email, user_pwd, avatar_url FROM users
WHERE user_id = ?
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.UserPwd,
		&i.AvatarUrl,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET user_name = ?, email = ?, user_pwd = ?, avatar_url = ?
WHERE user_id = ?
`

type UpdateUserParams struct {
	UserName  string         `json:"user_name"`
	Email     string         `json:"email"`
	UserPwd   string         `json:"user_pwd"`
	AvatarUrl sql.NullString `json:"avatar_url"`
	UserID    int64          `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UserName,
		arg.Email,
		arg.UserPwd,
		arg.AvatarUrl,
		arg.UserID,
	)
	return err
}
