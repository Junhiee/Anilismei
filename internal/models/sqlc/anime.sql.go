// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: anime.sql

package models

import (
	"context"
	"database/sql"
)

const addAnime = `-- name: AddAnime :exec
INSERT INTO animations(anime_id, genre_id, studio_id, title, country, image_url, evaluate, update_time, release_date, anime_status, rating)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type AddAnimeParams struct {
	AnimeID     int64                     `json:"anime_id"`
	GenreID     int32                     `json:"genre_id"`
	StudioID    int32                     `json:"studio_id"`
	Title       string                    `json:"title"`
	Country     string                    `json:"country"`
	ImageUrl    sql.NullString            `json:"image_url"`
	Evaluate    sql.NullString            `json:"evaluate"`
	UpdateTime  sql.NullTime              `json:"update_time"`
	ReleaseDate sql.NullTime              `json:"release_date"`
	AnimeStatus NullAnimationsAnimeStatus `json:"anime_status"`
	Rating      sql.NullFloat64           `json:"rating"`
}

func (q *Queries) AddAnime(ctx context.Context, arg AddAnimeParams) error {
	_, err := q.db.ExecContext(ctx, addAnime,
		arg.AnimeID,
		arg.GenreID,
		arg.StudioID,
		arg.Title,
		arg.Country,
		arg.ImageUrl,
		arg.Evaluate,
		arg.UpdateTime,
		arg.ReleaseDate,
		arg.AnimeStatus,
		arg.Rating,
	)
	return err
}

const getAnime = `-- name: GetAnime :one
SELECT anime_id, genre_id, studio_id, title, country, image_url, evaluate, update_time, release_date, anime_status, rating FROM animations
WHERE anime_id = ?
`

func (q *Queries) GetAnime(ctx context.Context, animeID int64) (Animation, error) {
	row := q.db.QueryRowContext(ctx, getAnime, animeID)
	var i Animation
	err := row.Scan(
		&i.AnimeID,
		&i.GenreID,
		&i.StudioID,
		&i.Title,
		&i.Country,
		&i.ImageUrl,
		&i.Evaluate,
		&i.UpdateTime,
		&i.ReleaseDate,
		&i.AnimeStatus,
		&i.Rating,
	)
	return i, err
}

const getListAnimes = `-- name: GetListAnimes :many
SELECT anime_id, genre_id, studio_id, title, country, image_url, evaluate, update_time, release_date, anime_status, rating FROM animations
ORDER BY release_date
LIMIT ? OFFSET ?
`

type GetListAnimesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListAnimes(ctx context.Context, arg GetListAnimesParams) ([]Animation, error) {
	rows, err := q.db.QueryContext(ctx, getListAnimes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Animation{}
	for rows.Next() {
		var i Animation
		if err := rows.Scan(
			&i.AnimeID,
			&i.GenreID,
			&i.StudioID,
			&i.Title,
			&i.Country,
			&i.ImageUrl,
			&i.Evaluate,
			&i.UpdateTime,
			&i.ReleaseDate,
			&i.AnimeStatus,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
